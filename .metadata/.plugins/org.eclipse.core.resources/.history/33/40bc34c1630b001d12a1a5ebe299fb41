package com.BalancedBracket.main;

import java.util.Scanner;
import java.util.Stack;

public class Driver {

	 static boolean areBracketsBalanced(String expr)
	    {
	        Stack<Character> stack
	            = new Stack<Character>();
	  
	        // Traversing the Expression
	        for (int i = 0; i < expr.length(); i++) 
	        {
	            char x = expr.charAt(i);
	  
	            if (x == '(' || x == '[' || x == '{') 
	            {
	                // Push the element in the stack
	                stack.push(x);
	                continue;
	            }
	  
	            // If current character is not opening
	            // bracket, then it must be closing.
	            if (stack.isEmpty())
	                return false;
	            char check;
	            switch (x) {
	            case ')':
	                check = stack.pop();
	                if (check == '{' || check == '[')
	                    return false;
	                break;
	  
	            case '}':
	                check = stack.pop();
	                if (check == '(' || check == '[')
	                    return false;
	                break;
	  
	            case ']':
	                check = stack.pop();
	                if (check == '(' || check == '{')
	                    return false;
	                break;
	            }
	        }
	  
	        // Check Empty Stack
	        return (stack.isEmpty());
	    }
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter expression");
		String expr = sc.nextLine();
        // Function call
        if (areBracketsBalanced(expr))
            System.out.println("Balanced ");
        else
            System.out.println("Not Balanced ");
    }

}
